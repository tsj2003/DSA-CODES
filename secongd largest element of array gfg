Problem statement
For a given a string(str), find and return the highest occurring character.

Example:
Input String: "abcdeapapqarr"
Expected Output: 'a'
Since 'a' has appeared four times in the string which happens to be the highest frequency character, the answer would be 'a'.
If there are two characters in the input string with the same frequency, return the character which comes first.

Consider:
Assume all the characters in the given string to be in lowercase always.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
0 <= N <= 10^6
Where N is the length of the input string.

Time Limit: 1 second
Sample Input 1:
abdefgbabfba
Sample Output 1:
b
Sample Input 2:
xy
Sample Output 2:
x
char highestOccurringChar(char input[]) {
    // Initialize a count array to track frequency of each character
    int count[256] = {0}; // 256 to include all ASCII characters
    char result = '\0';   // To store the result
    int maxFrequency = 0; // To track the maximum frequency

    // Traverse the input string
    for (int i = 0; input[i] != '\0'; i++) {
        count[input[i]]++; // Increment the frequency of the character

        // Check if the current character should update the result
        if (count[input[i]] > maxFrequency) {
            maxFrequency = count[input[i]];
            result = input[i];
        }
        // If frequencies are equal, do nothing, as result is already the first appearing max one
    }

    return result;
}

